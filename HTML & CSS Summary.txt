7) 반복되는 단어 한방에 수정
 ⌘ + D or Ctrl + D

6) 클릭하는 곳마다 커서 생성
 ⌥ + Click or Alt + Click

5) 코드 위/아래로 움직이기
 ⌥ + ↑ / ↓ or Alt + ↑ / ↓

4) 코드 복사해서 위/아래로 움직이기
 ⌥ + ⇧ + ↑ / ↓ or Alt + ⇧ + ↑ / ↓

3) 코드 블록 한방에 코멘트 처리하기
 ⌘ + / or Ctrl + /

2) 선택된 영역에 커서 만들기
 ⌥ + ⇧ + i or Alt + ⇧ + i 

1) 마우스가 가는 곳 마다 커서 만들기
 ⌥ + ⇧ + Mouse Drag or Alt + ⇧ + Mouse Drag

Bonus:
파일 맨 위-아래로 한번에 이동하기
Top / Bottom of File: ⌘ + ↑ / ↓ or Ctrl + Home / End

사이드바 숨기기
Hide / Show Sidebar: ⌘ + B or Ctrl + B



2.0 Our Fist HTML file 

폴더명은 항상 소문자로 만들어야 합니다. 
파일명도 항상 소문자로 만들어야 합니다. 

2.1 Setup and Errors 

웹사이트를 만들려면 vsc가 꼭 필요한 것은 아니다.
메모장으로도 가능하다. 하지만 vsc에는 많은 확장프로그램을 가지고 있다. 

2.2 Our First HTML Tag

HTML 의 목적은 브라우저한테 뭐가 뭔지 알려주는 것이다. 
여기부터 여기까지는 링크다. 여기부터 여기까지는 body 이다. 

<tag>contents</tag> <= html 코드의 기초.

tag 마다 코드작성자가 의도하진 않지만 그 tag 만이 가지고 있는 형태가 있다. 
예를들어 h1은 뚱뚱하고 큰 글씨체를 가지고 있다. 

2.3 More Tags and Prettier 

list tag에서는 ul = unordered list 와 ol = ordered list tag 가 있다. 

ul과 ol 사이에는 li를 각각에 content에 넣어줘야 한다. (브라우저는 똑똑하지 않다.)

ex) <ul>                    
    <li>beer</li>
    <li>kimchi</li>
    <li>orange</li>
    <li>apple</li>
    </ul> 

 2.4 Tag Attributes 

    a 는 anchor을 의미합니다. (link 와 같음) 

    <a> 는 다른 웹사이트로 가도록 도와준다. 

    <a href="http://google.com" target="_self" >Go to google.com</a>

    tag에 추가하는 부가적인 정보를 Attributes 라고 한다.  

    몇몇의 tags 들은 명확하지 않아서 attributes (속성)을 넣어줌으로서 tag가 무엇을 하는지 정확하게 알려준다. 

    target="_self" 기본값. target="_blank" 으로 바꾸면 a 태그는 새탭을 열어서 다른 웹사이트를 열여준다. 


    <img/> 는 클로징 태그가 필요하지 않다. img 태그는 자체클로징태그이기 때문이다. 

    img 태그는 src attribute 가 필요하다.  


2.5 More Tags and Head 

HTML 문서를 작성하는 구조가 있다. 

<!DOCTYPE html> 이것은 모든 웹사이트가 가지고 있는 기본적인 코드이다.
이 코드는 이 웹사이트가 단순한 text 파일이 아니라 html 문서라고 알려준다. 

두번째로는 <html> 안에는 <head> 와 <body> 가 있다. 

<head>에는 웹사이트의 환경을 설정한다.(외부적으로 보여지지 않는다.)
ex) <title> Kokoa Clone </title> 

<body>에는 웹사이트의 콘텐츠를 설정한다. 

2.6 Its All About the Head 

<meta> 는 부가적인 정보라는 뜻이다. 
title, link, style, script 
meta content, name 두가지 속성 attributes를 가지고 있다. 
meta charset = "utf-8" = 이 태그는 브라우저에게 text 를 어떻게 그려야하는지 말해준다. 
               이 태그가 없으면 글자가 깨져서 보여질수도 있다. 매우 중요한 태그이다. 

html lang 은 구글이나 네이버에 우리 사이트에서 사용되는 언어가 무엇인지 알려준다. 

즉 head에 있는 태그들은 웹사이트의 정보를 브라우저에게 알려주기 위함이다. 

<link> 에는 rel, sizes, href 와 같은 많은 속성을 가지고 있다. 
이태그를 이용하면 탭에 웹사이트의 아이콘을 넣을 수 있다. 
ex) <link ref="shortcut" sizes="64x64 32x32" href="img/link"/>

og:image는 카카오톡에 공유 될때 보여지는 이미지이다. 

2.7 More Tags 

mdn = 검색키워드를 넣어서 검색해라. 코딩을 할때 무엇인가를 찾고 싶을때 유용함.

<p> 긴 문장을 넣을때 유용함. 

2.8 Form Tags 

form 에는 다양한 태그들이 있다. 
가장 많이 쓰는것은 input 태그이다. 모든 웹사이트에는 Input 이 있다. 
form 에는 정말 다양한 attributes가 있다. 

- placeholder는 input이 가지는 또다른 attribute
- value라는 속성으로 submit에 적혀지는 글자를 다른 걸로 바꿀 수 있음
- disabled 속성 입력하면 해당 칸이나 버튼 작동 안되게 해줌
- required 속성 입력하면 해당 칸 작성 안하면 안넘어감
- minlength 최소 입력해야하는 글자 수 설정

대부분의 태그를 모른다고 걱정하지 말것.


<form> 
 <input type="file" accept=".pdf,.png"> === 오직 pdf만 파일에 첨부할수 있다는 의미이다.  (image/* , video/*)
 <input required maxlength = "15" minlength = "5" type="text" placeholder = "Last name">
 <input required maxlength = "15" minlength = "5" type="text" placeholder = "First name">
 <input required maxlength = "15" minlength = "5" type="password">
 <input required maxlength = "15" minlength = "5" type="url" placeholder = "email address">
 <input type="submit" value="Log In">
</form>

2.9 More Tags and IDs 

label 태그는 form 에 질문을 추가할수 있게 해준다. 
label 태그는 input 태그와 같이 작성되야함. 

<label for="profile">Profile Photo</label>
<input id="profile" type="file" accept=".pdf">

label의 for 와 input의 id는 무조건 같은 이름으로 작성이 되야한다. 

<div class="preference">
    <label for="cheese">Do you like cheese?</label>
    <input type="checkbox" name="cheese" id="cheese">
</div>

<div class="preference">
    <label for="peas">Do you like peas?</label>
    <input type="checkbox" name="peas" id="peas">
</div>


id = 는 고유식별자이며 다른 태그에 이름이 중복 되어서는 안된다. 


2.10 Semantic HTML 

웹사이트를 만들때 콘텐츠들이 양옆이 아니라 위 아래로 만들고 싶어할때는 
div (content division element)  tag로 tag를 감싸주면 위아래로 콘텐츠를 나눌수 있다. 
div는 기본값으로 박스형태이며 위아래로 콘텐츠들을 나눌수 있다. 
div에는 <header></header>, <footer></footer>, <main></main>
처럼 나눌수 있는데 이것들을 Semantic tag라고한다. 
div로 모든 html을 꾸며줄순 있지만 프로그래머에 이렇게 코드를 짜면 
html을 짐작하기가 아주 어렵다. 그렇기 때문에 프로그래머는 semantic tag로 
html 을 만들어줄 의무가 있다. 

<span></span> 은 짧은 텍스트를 위한 태그이다. 
<p></p> 은 긴문장을 위한 태그이다. 

<span></span> 에도 <address></address> 등등 semantic tag가 있다. 


3.0 How to Add CSS to HTML

1. css를 html 페이지에 추가하는 두가지 방법
- 같은 html 파일에 html코드와 css코드를 놓는 방법
: head 파트에 style 태그를 사용해서 그 사이에 css 코드 입력하기

- css와 html을 분리하는 방법(추천)
: 또는 css 파일(styles.css)을 만들어서 link 태그로 파일 연결하기(link 태그를 열고 href로 styles.css 값 주고 rel 속성으로 css 파일과 html 도큐먼트의 관계인 stylesheet 명시)
: 따로 분리해서 만들면 여러 html 파일에 적용할 수 있어서 좋음
    
3.1 Writing Our Fist CSS Lines 

ex) blueTitle {
     color:tomato;
     font:25px;
}

#css 코드 작성 세가지 규칙
- html 코드를 가리키는 것을 selector 이라고 함. 그리고 selector의 텍스트 크기, 폰트 종류, 색상 등을 속성이라고 하는데 이것들을 {중괄호}를 사용해서 묶음.

1. selector을 사용해서 html의 어떤 태그를 가리킴
2. 중괄호 열고 속성 적기
3. 값 쓰기

#html 태그 중에 h1 태그에 css 적용하기
1. 먼저 태그 이름이랑 동일하게 selector인 h1을 적고
2. 중괄호 열고
3. 속성 이름과 : 을 쓴 다음 값을 줌
4. 그리고 세미콜론;으로 닫아주면 한 줄 작성 완료

- color, font-size(속성이름 적을 때 띄어쓰기 안함), text-decoration
: 속성에 맞는 값 써주기

속성이름 띄어쓰기 x
각 줄은 세미콜론으로 끝나기
속성이름 다음 속성값을 쓰기

3.2 What Does Cascading Mean 

CSS는 Cascading Style Sheets. 이때 C가 의미하는 cascading은 폭포같은, 계속되는, 연속되는 이라는 의미.

브라우저가 CSS코드를 읽을 때 위에 있는 코드부터 차례차례로 읽힘. 
즉, 마지막에 있는 코드가 가장 마지막에 적용됨. -> 코드의 순서가 결과에 영향 미침


3.3 Blocks and Inlines 

blocks (blocks 은 기본적으로 높이와 넓이를 가진다.) 
        (박스는 자기에 옆에 아무것도 놓지 못한다.)
= div, header, main, footer ,h1, p 
inlines (inlines은 기본적으로 높이와 넓이가 없다.) 
        (inlines은 자기옆에 다른 content가 와도 된다.)
        (아주 작은 글씨나 링크 이미지 주소 등을 뜻한다.)
= span ,address ,a ,img , code

3.4  Margin Part One 

display = block, inline content 의 기본값을 바꿔준다. 
blocks는 box 이므로 margin, border, padding 값을 가지고 있다.
margin은 박스의 경계에서 바깥공간을 의미함. 
border은 말그대로 박ㅅ의 경계를 의미함.
padding은 박스의 경계에서 안쪽공간을 의미함. 

3.5 Margin Part Two 

Collapsing margins = 
collapsing margin(마진상쇄)
- 두 box의 border가 겹칠때 일어난다.
- 수직으로만 발생한다.
==> padding 속성을 사용하여 해결할 수 있다.

3.6 Paddings and IDs 

padding: box의 경게로부터 안쪽에 있는 공간이다. 

id 를 css에서 기록하려면 # 가 필요하다. 

3.7 Border 

border - box의 경계
거의 한 종류만 쓰게 될 것

* 전체
* {border: 2px; solid black;} 

-> html문서 내 모든 요소에 border 2px이 지정됨.

border는 inline 요소에도 사용 가능.


3.8 Classes 

많은 span중에 각각의 span에 색깔을 바꿔주고 싶다면 class을 사용하면 좋다. 

요소를 가르킬수 있으면서 이름이 겹쳐도 될때는 class을 사용한다. 

#tomato = id 
.tomato = class 

3.9 Inline Block 

div는 기본적으로 block 이것은 display - inline으로 바꿀수 있다. 
inline-block은: inline 을 block으로 인식하게 할수 있다. 
display : block, inline, inline-block; 

* 요즘같이 (Responsive degisn) 반응형 디자인앱을 만들때에는 inline-block은 잘쓰지 않는다.
  특히 모니터가 다 다르면 내가 보는 콘텐츠의 높이와 넓이가 다른 모니터로 보는 높이와 넓이와 다를수 있다. 

3.10 Flexbox Part One 

반응형 디자인앱을 만드는 요즘에 개발자들은 flexbox라는것을 만들었다. 

flexbox - div 와 같은 박스 들을 웹사이트에 어디든 쉽게 위치할수 있게 만들어짐. (아주 유용함)

flexbox 에는 3가지 규칙이 있다. 1. 자식 엘리먼트에는 어떤것도 적지 않기. 부모 엘리먼트에게만 말한다.

자식 엘리먼트를 웹사이트상에서 움직이게 하기 위해서는 부모 엘리먼트를 flex 부모로 만들어야한다. 

부모 display: flex; 을 css에 설정해놓으면 이제 flexbox를 사용할수 있다. 

justfy-conent: center, flex-start, flex- end, space-evenly, space-around, space-between

defauit (main-axis) justfy-content는 박스의 수평상에서 박스가 어느쪽이든 움직이게 한다. 

align-items: flex-start, flex-end, stretch

defauit (cross-axis) align-items 박스의 수직상에서 박스가 어느쪽이든 움직이게 한다.

https://developer.mozilla.org/ko/docs/Learn/CSS/CSS_layout/Flexbox


3.11 Flex Part Two 

주축과 교차축은 flex-direction으로 변경이 가능함.

flex-direction: 기본적으로 row 값이다 하지만 column 을 하면 

justfy-content 는 수직이 되고 
align-items 은 수평이 된다. 

서로 뒤바뀜. 

* 자식 엘리먼트들도 flex 부모로 설정하면 그안에 text의 위치를 박스안에서 바꿀수가 있다. 

flex-wrap : nowrap; 모든 요소들의 줄을 같게 유지하게 도와준다. 
flex-wrap : wrap; 요소들을 최대한 줄어들게 하지만 설정된 높이 넓이 까지 줄어들면 줄을 바꾼다. 
flex-wrap : wrap-reverse; 반대로 바꿔준다. 
flex-direction: column-reverse, row-reverse 등등 도 있다. 
align-self: 한 특정한 element의 수직을 움직이게 할수 있다. 
flex-flow: flex-direction 과 flex-wrap이 합쳐진 형태.


3.12 Fixed 

position: 레이아웃 보다는 위치를 아주 조금 위로 아니면 오른쪽으로 옮기고 싶을때 사용한다.

position:fixed; 박스를 고정함. 보통 status-bar 에 사용한다. 

* top left right bottom 중 하나라도 수정하게 되면 서로 다른 레이어로 넘어간다. (겹쳐짐)

3.13 Position: relative absolute 

position:static 레이아웃이 박스의 처음 위치하는곳에 두는것. 
position:relative element를 처음 놓인 기준점 에서 조금씩 위치하고 싶을때 사용.

ex) green {
    position:relative;
    top:10px;
    right:10px;
}

position: absolute 가장 가까운 relative 부모를 기준으로 top left bottom top 다 사용할수 있다. 
* 부모를 position:relative로 설정해주지 않으면 최고 할머니 엘리먼트인 body를 기준으로 이동함.

3.14 Pseudo Selectors part One 

class 나 id 를 지정해주지 않아도 element를 정확하게 가리키는 방법이 있는데
그것이 Pseudo selector 이다. 
div:last-child = div중 가장 마지막 div를 가르킴.
div:first-child = div중 가장 첫번째 div를 가르킴.
div:nth-child(2) = div중 두번째 div를 가르킴.
div:nth-child(even) = 짝수 div들을 선택할수 있다. 
그밖에도 odd, 2n+1 , 2n+2 처럼 프로그래머가 설정하여 가르킬수 있다. 

3.15 Combinators 

p span { 
    color:white: 
}    = p 안에 span의 색깔을 white 로 바꿔라. 

div > span {
    font-size: 25px;
} = div 바로 아래에 있는 자식 span 의 폰트 사이즈를 25px로 바꿔라. 

p + span {
    color:black;
} = p 의 형제자식 span의 색깔을 black으로 바꿔라. 


* 만약 p 와 span 사이에 다른 요소가 있으면 적용되지 않는다. 그럴때는 ~를 사용하면 된다.
p ~ span { 
    color:blue;
} = p 의 형제자식인데 꼭 바로뒤에 오지 않는 span에 색깔을 blue로 바꿔라.

css attribute selector는 대부분의 element를 가리키게 해준다. 

input:required { 
    border-color:tomato;
}

input[type="password"] {
    border-color:black;
} = input 의 타입 password의 border-color을 black 으로 바꿔라.

input[placeholder="username"] {
    opacity:0.8;
} = input 의 placeholder 중 username 을 가지고 있는 element의 투명도를 0.8 로 바꿔라.

input[placeholder~="name"] {
    background-color:white;
} = input의 placeholder중 name을 가지오 있는 모든 elements의 뒷배경색을 white로 바꿔라.


a[href$=".org"] {font-style: italic;} 은 끝이 .org로 끝나는 모든 href에 적용.

3.17 States 

states: active, focus, hover over, visited, focus within 을 states 라고 한다.

active : 버튼을 누르고 있을때 마우스 클릭을 놓지 않은 상태이다. 
hover: 클릭하는게 아니라 마우스가 element의 위에 있을때 
focus: 키보드로 선택 되었을때 (tap)을 누를때 적용
visited: 링크에만 적용 링크를 클릭해서 다른 사이트로 이동했을때.

이것들을 조합할수도 있음. 

focus-within 자식 element중에 하나라도 focus 되었을때.


form:hover input:focus {
    background-color: black;
} = form에 마우스가 올려져있는 상태고 input이 focus가 되어있을때 뒷배경의 색깔을 검정색으로 바꿔라.

input::placeholder {
    color:yellowgreen
} = input의 placeholder의 컬러를 yellowgreen으로 바꿔라.


3.19  Colors Variables 

변수는 값을 저장할수 있게 해준다 그리고 나중에 사용이 가능하게 함

컬러는 css에서 매우 중요.
css에서 알아야 할 컬러시스템에는 3가지가 있음.

1. hexadecimal color(16진수 컬러)
: #000000

2. rgb 방식
: (0, 0, 0)

3.. rgba 방식
: a는 알파, 투명도를 나타냄 (0, 0, 0, 0)

똑같은 색상 여러 코드에 사용하려면 복붙해도 되지만 수정할 일 생기면 귀찮음.
이때 :root라는 변수 사용 가능. :root는 모든 문서의 출발점.

:root {--main-color: #f000;} 라고 문서 처음에 설정해놓고, 이 색상을 사용하는 코드마다
color: var(--main-color); 라고 써주면 다 똑같이 적용됨. 나중에 색상 수정하고 싶으면 한 번만 하면 됨. 이렇게 컬러를 변수에 저장하는 방법 (원래는 custom property 라고 함).

변수 이름 적을 때는 dash 2개, 변수 이름, 변수 이름 사이에는 dash

컬러만 가능한게 아니라 --default-border: 1px solid var(--main-color) 이렇게도 지정 가능.

*color picker라는 크롬 프로그램 사용

4.0 Transitions 

Transitions 이란 어떤 상태에서 다른상태로의 변화를 애니메이션으로 만드는 방법

transition 조건은 state가 없는 요소에 써야한다. 

ex) a {
    color:wheat; 
    background-color: tomato;
    transition: background-color 5s ease-in-out, color 5s ease-inout;
    아니면 
    transition: all 5s ease-in-out; = 모든것을 적용
}

a:hover {
    color:tomato;
    background-color:wheat;
} = 링크에 마우스를 올리면 뒷배경색깔 과 폰트색깔을 5초동안 천천히 변경해라.

4.1 Transitions part Two 

ease-in function = 어떻게 애니메이션이 바뀌는지 알려주는 기능.

linear = 무엇인가를 직선으로 만들어줌 같은속도로 적용
ease-in = 시작점보다 빨라짐 
ease-out - 끝에서 느려짐
ease-in-out = 시작점에서 빨라졌다가 끝에서 느려짐

4.2 Transformations 

Transformations은 말그대로 한 element를 변형시켜줄수 있다. 
Transformations은 다른 box element, image 에 영향을 끼치지 않는다.



transform: rotateY(40deg); = element를 3d로 40도 바꿀수있다. 
rotateX(), rotateY(), rotateZ()
scaleX(4), scale(2,2);
translate(100px);

중요한것은 transition 과 transform 을 조합하여 멋진 애니메이션으로 만들수 있다. 

img {
    transition:transform 5s ease-in-out; 
}

img:hover {
    transform:rotateX(90deg) scale(0.5);
} = 마우스를 링크에 올려놓으면 5초동안 이미지가 90도로 움직이고 이미지가 반으로 줄어듬.



4.3 Animations part One 

여태가지 한 애니메이션은 내가 무엇인가를 했을때 (hover, focus) 등의 동작을 실행했을때
애니메이션이 시작됨. 

만약 계속 재생되는 애니메이션을 가지고 싶다면 

coin flips 만드는법 

@keyframes nameOfAnimation { 
  from {
    transform: rotateX(0);
  }
  to {
    transform: rotateX(180deg) translateX(100);
  }
}

img {
    animation: nameOfAnimation 5s ease-in-out infinite ;
} = 마우스의 움직임없이 애니메이션을 만들어준다. 

infinite 를 넣어주면 애니메이션이 무한으로 돌아간다. 

여기서 몇가지 단계를 더 추가하면 더 이쁜 애니메이션을 만들수가 있다. 

4.4 Animations part Two 

@keyframes superSexyCoinFlip {
    0% {
     transform:tranlateY(0);
    }
    25% {
    transform:scale(2);
    
    }
    50% {
    transform:rotateY(180dge) tranlateY(100px);
    border-color:tomato;
    }
    75 % {
    transform:scale(5);
    
    }
    100% {
    transform: rotate(Y) tranlateY (0px);
    }
}

4.5 Media Queries 

media query는 오직 css만을 이용해서 웹사이트를 보고 있는 사용자의 스크린 사이즈를 알 수 있는 방법이다. 
누구는 아이폰, 누구는 큰 화면, 누구는 portrait 모드(세로), 누구는 landscape 모드(가로) 등 다 다르게 웹사이트를 볼텐데 오직 css만으로 이 모든 것을 감지할 수 있음. 그리고 우리의 css style을 바꿀 수 있음.
=> media query로 스크린 사이즈가 이 정도면 이 css style을 사용자에게 보여줘라고 지정

@media screen and (max-width: 400px) {
div {background-color: tomato;}
}
=> 스크린 사이즈의 최대 너비가 400px보다 작으면, 배경색을 tomato로 보이게 해라

@media screen and (max-width: 600px) and (min-width: 400px) and (orientation: landscape) 이렇게 여러개 조합 가능. orientation: landscape는 가로모드를 의미. 반대는 portrait.

span에 plase flip your phone을 쓰고, 가로모드일 때 텍스트가 사라지게 만드려면 span에
@media screen and (orientation: landscape) {
span {display: none;}
} 이렇게 작성.


@media screen and ( min-width: 600px) and (max-width:800px) {
    div {
        background-color: tomato;
    }
} = 스크린이 600보다 크고 800 보다 작으면 뒷배경을 tomato로 해라.


orientation = portrait, landscape
min-width, max-width, 
min-device-width

그밖에도 다양한 미디어 쿼리가 있다. 

@media print {
    body {
        background-color: tomato;
    }
} = print 할때 뒷배경을 토마토 컬러로 바꿔라.

5.0 What is Git

코드가 긴 경우에는 파일의 히스토리가 필요하다. 

git은 파일의 변경내역을 계속 확인할수 있게 도와준다.

간단하게 내가 만든 코드들을 깃에 저장하여 필요할때 꺼내서 쓸수 있다. 

5.1 What is GitHub

git은 파일을 주시하면 관리해주는 도구
github는 git의 변경 내역을 볼수있는 사이트

repository(저장소): 코드를 저장하는 폴더 (내 프로젝트가 살고있는곳)
commit: 코드를 저장하는 시점

commit가 255개면 내가 이 프로젝트를 255개의 버전으로 저장했다는 의미

6.0 Introduction 

.DS_Store - 맥에서 자동적으로 만든 파일 

.gitignore = 무시하고 싶을 파일을 기록하는 파일이다. 


6.1 Sign Up Screen part One 

index.html = 웹서버가 기본값으로 index.html 를 찾게 되있다. 

README.md = 모든 웹사이트는 기본적으로 가지고 있는 파일 웹사이트의 정보를 기록.

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Welcomo to Kokoa Talk</title>
  </head>
  <body>
    <div id="status-bar">
      <div class="status-bar__column">
        <span>No Service</span>
        <!-- To Do: Wifi Icon -->
      </div>
      <div class="status-bar__column">
        <span>18:43</span>
      </div>
      <div class="status-bar__column">
        <span>110%</span>
        <!-- Battery Icon -->
        <!-- Lightning Icon -->
      </div>
    </div>
  </body>
</html>


6.2 BEM 


BEM = 좀더 쉽게 css를 읽는 방법.

.btn__price {}
.btn--orange {}

block(블록, class 같은 개념)
block__Element(요소, 정보 ex: text..)
block--Modifier(수식어 ex: color..)

대부분의 프로그래머들은 class를 쓰자고 약속함.